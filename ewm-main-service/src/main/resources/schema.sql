DROP TABLE IF EXISTS participation_requests;
DROP TABLE IF EXISTS comments;
DROP TABLE IF EXISTS compilation_x_event;
DROP TABLE IF EXISTS compilations;
DROP TABLE IF EXISTS events;
DROP TABLE IF EXISTS locations;
DROP TABLE IF EXISTS categories;
DROP TABLE IF EXISTS users;


CREATE TABLE IF NOT EXISTS users
(
    id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name  VARCHAR(250)                            NOT NULL,
    email VARCHAR(254)                            NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (id),
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS categories
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(50)                            NOT NULL,
    CONSTRAINT pk_category PRIMARY KEY (id),
    CONSTRAINT UQ_CATEGORY_NAME UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS locations
(
    id  BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    lat FLOAT                                   NOT NULL,
    lon FLOAT                                   NOT NULL,
    CONSTRAINT pk_location PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS events
(
    id                BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    annotation        VARCHAR(2000)                            NOT NULL,
    category_id       BIGINT                                  NOT NULL,
    created_dttm       TIMESTAMP                               NOT NULL,
    description       VARCHAR(7000)                           NOT NULL,
    event_dttm        TIMESTAMP                               NOT NULL,
    initiator_id      BIGINT                                  NOT NULL,
    location_id       BIGINT                                  NOT NULL,
    is_paid           BOOLEAN                                 NOT NULL,
    participant_limit INTEGER,
    published_dttm    TIMESTAMP,
    is_moderated      BOOLEAN,
    state             VARCHAR(70),
    title             VARCHAR(120)                            NOT NULL,
    CONSTRAINT fk_events_to_locations FOREIGN KEY (location_id) REFERENCES locations (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_events_to_categories FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_events_to_users FOREIGN KEY (initiator_id) REFERENCES users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT pk_event PRIMARY KEY (id)
);
CREATE INDEX idx_category_id ON events (category_id);

CREATE TABLE IF NOT EXISTS compilations
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title       VARCHAR(50)                            NOT NULL,
    is_pinned   BOOLEAN                                 NOT NULL,
    CONSTRAINT pk_compilation PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS compilation_x_event
(
    compilation_id BIGINT NOT NULL,
    event_id       BIGINT NOT NULL,
    CONSTRAINT pk_compilation_x_event PRIMARY KEY (compilation_id, event_id),
    CONSTRAINT fk_compilation_x_event_to_compilation FOREIGN KEY (compilation_id) REFERENCES compilations (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_compilation_x_event_to_event FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS participation_requests
(
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_dttm       TIMESTAMP                               NOT NULL,
    event_id           BIGINT                                  NOT NULL,
    requester_id       BIGINT                                  NOT NULL,
    status             VARCHAR(70),
    CONSTRAINT pk_participation_requests PRIMARY KEY (id),
    CONSTRAINT fk_participation_requests_to_users FOREIGN KEY (requester_id) REFERENCES users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_participation_requests_to_events FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX idx_event_id ON participation_requests (event_id);
CREATE INDEX idx_requester_id ON participation_requests (requester_id);

CREATE TABLE IF NOT EXISTS comments
(
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    text VARCHAR(2000) NOT NULL,
    created_dttm       TIMESTAMP                               NOT NULL,
    updated_dttm       TIMESTAMP                               NOT NULL,
    event_id           BIGINT                                  NOT NULL,
    author_id       BIGINT                                  NOT NULL,
    CONSTRAINT pk_comments PRIMARY KEY (id),
    CONSTRAINT fk_participation_requests_to_users FOREIGN KEY (author_id) REFERENCES users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_participation_requests_to_events FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX idx_comment_event_id ON comments (event_id);
CREATE INDEX idx_author_id ON comments (author_id);